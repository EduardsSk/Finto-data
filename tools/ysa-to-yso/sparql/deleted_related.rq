PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX dsv: <http://purl.org/iso25964/DataSet/Versioning#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sh: <http://purl.org/skos-history/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xhv: <http://www.w3.org/1999/xhtml/vocab#>
PREFIX zbwext: <http://zbw.eu/namespaces/zbw-extensions/>
PREFIX rdau: <http://rdaregistry.info/Elements/u/>
#
# Added related relations to already existing concepts
# (newly introduced related concepts flagged)
#
SELECT DISTINCT ?concept ?conceptLabel ?relatedConcept ?relatedConceptLabel ?newRelationship ?ysoConcept ?ysoConceptLabel ?ysoRelatedConcept ?ysoRelatedConceptLabel ?ysoRelationship
WHERE {
  # parameters
  VALUES ( ?versionHistoryGraph ?oldVersion ?newVersion ?conceptType ) {
    ( <http://www.yso.fi/onto/ysa/version> undef undef skos:Concept )
  }
  GRAPH ?versionHistoryGraph {
    # get the current and the previous version as default versions
    ?versionset dsv:currentVersionRecord/xhv:prev/dc:identifier ?previousVersion .
    ?versionset dsv:currentVersionRecord/dc:identifier ?latestVersion .
    # select the versions to actually use
    BIND(coalesce(?oldVersion, ?previousVersion) AS ?oldVersionSelected)
    BIND(coalesce(?newVersion, ?latestVersion) AS ?newVersionSelected)
    # get the delta and via that the relevant graphs
    ?delta a sh:SchemeDelta ;
      sh:deltaFrom/dc:identifier ?oldVersionSelected ;
      sh:deltaTo/dc:identifier ?newVersionSelected ;
      sh:deltaFrom/sh:usingNamedGraph/sd:name ?oldVersionGraph ;
      sh:deltaTo/sh:usingNamedGraph/sd:name ?newVersionGraph ;
      dcterms:hasPart ?insertions ;
      dcterms:hasPart ?deletions .
    ?insertions a sh:SchemeDeltaInsertions ;
      sh:usingNamedGraph/sd:name ?insertionsGraph .
    ?deletions a sh:SchemeDeltaDeletions ;
      sh:usingNamedGraph/sd:name ?deletionsGraph .
  }
  
  # newly deleted related relations
  GRAPH ?deletionsGraph {
    ?concept skos:related ?relatedConcept .
  }

  # ... for still existing concepts
  FILTER exists {
    GRAPH ?newVersionGraph {
      ?concept ?p []
    }
  }

  # don't count cases where the property changed to RDA successor/predecessor
  FILTER NOT EXISTS {
    GRAPH ?insertionsGraph {
      ?concept rdau:P60683|rdau:P60686 ?relatedConcept .
    }
  }

  # restrict to ?conceptType
  GRAPH ?newVersionGraph {
    ?concept a ?conceptType .
    ?concept skos:prefLabel ?conceptLabel .
    ?relatedConcept a ?conceptType .
    ?relatedConcept skos:prefLabel ?relatedConceptLabel .
  }

  # current relationship
  OPTIONAL {
    GRAPH ?newVersionGraph {
      ?concept ?newRelationship ?relatedConcept .
    }
  }

  # current relationship in YSO
  SERVICE <http://api.dev.finto.fi/sparql> {
    OPTIONAL {
      GRAPH <http://www.yso.fi/onto/yso/> {
        ?ysoConcept skos:closeMatch ?concept .
        FILTER NOT EXISTS { ?ysoConcept owl:deprecated true }
        ?ysoConcept skos:prefLabel ?ysoConceptLabel .
        FILTER(LANG(?conceptLabel)=LANG(?ysoConceptLabel))
        ?ysoRelatedConcept skos:closeMatch ?relatedConcept .
        FILTER NOT EXISTS { ?ysoRelatedConcept owl:deprecated true }
        ?ysoRelatedConcept skos:prefLabel ?ysoRelatedConceptLabel .
        FILTER(LANG(?relatedConceptLabel)=LANG(?ysoRelatedConceptLabel))
        OPTIONAL {
          ?ysoConcept ?ysoRelationship ?ysoRelatedConcept .
        }
      }      
    }
  }

}
ORDER BY ?conceptLabel ?relatedConceptLabel
