# IPython-kehitykseen

# komentoriviparametrit
sys.argv = [
    '--input', '../Finto-data/vocabularies/slm/slm-skos.ttl',
    #"-o", "testYso.mrcx", # eksplisiittinen -o estää IPythonissa outputtia tulostumasta näytölle
    #"-m",
    "--vocabulary_code", "slm",
    #"-e", "http://api.dev.finto.fi/sparql",
    "--loc_directory", "loc/",
    "--languages", "fi",
    "-log", "yso2marc.log",
    "-c", "config.ini",
    #'-cs', "yso-paikat",
    #"-eg", " ".join([YSO]),
    "-keepDeprecatedAfter", "NONE",
    "--ignore_other_graph_warnings",
    ]
       
print(sys.argv)

# tämä pitää vaihtaa koodiin, jotta voi emuloida komentoriviajoa
args = parser.parse_args() ---> args = parser.parse_args(sys.argv)

# aseta globaaliksi / tyhjentäminen
graphi = Graph()
other_graphs = Graph()
# muista kommentoida/laita eri soluun, jotta ei aina suoriteta


# otetaan globaali (vaihda kommentti päälle/pois)
# käytetään sitä, += operaatiolla tallentaa
# ei enää käytetä (kommentoidaan graafiin luku)

main-funktiossa:
    # kopataan globaali
    graphi = globals()["graphi"]
    # tallennetaan siihen jotain (ajetaan main)
    graphi += Graph().parse(settings.get(cs, "input"), format=settings.get(cs, "inputFormat", fallback="turtle"))        
    
    --> seuraavaa ajokertaa varten kommentoidaan alempi rivi
    sama other_graphs-muuttujalle
    
    --> nyt graafit ovat muistissa, nopea suoritus
    

# tuotetun marcxml:n tutkiminen - voit käyttää sen laventamiseen esimerkiksi catmandu-ohjelmaa   
# ohessa esimerkki, miten ajaa suoraan notebook-solusta
# --> generoi laveaa marcxml:ää

kieli = "fi"
subprocess.run("catmandu convert MARC --type XML to MARC --type XML <testYso.mrcx | xmllint --format - >testYso-" + kieli + "-formatted.mrcx",
    stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

#print("catmandu convert MARC --type XML to MARC --type XML <testYso-" + kieli +".mrcx | xmllint --format - >testYso-" + kieli + "-formatted.mrcx")
#subprocess.run("catmandu convert MARC --type XML to MARC --type XML <testYso-" + kieli +".mrcx | xmllint --format - >testYso-" + kieli + "-formatted.mrcx",
#    stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

