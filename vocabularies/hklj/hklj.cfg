# Skosify configuration file for HKLJ

# runtime options which correspond to command line parameters
[options]
set_modified=True

update_query=
    PREFIX hklj-meta: <http://www.yso.fi/onto/hklj-meta/>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
 	PREFIX hklj:   <http://urn.fi/URN:NBN:fi:au:hklj:>

    INSERT {
        hklj-meta:FormClass skos:topConceptOf hklj: .
		hklj-meta:Concept skos:topConceptOf hklj: .
    }


# define custom RDF namespaces that can then be used in the mappings below (and will also be used in the output file)
# Note that common namespaces are already defined: rdf, rdfs, owl, skos, dc, dct
[namespaces]

# define what to do with types in the source vocabulary, i.e. how these map to SKOS constructs
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the instances)
# the <key> instances will be replaced with <value> instances.
# key may start with * which matches any localname prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[types]

# define what to do with literal properties on Concepts
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[literals]
# define what to do with relation properties on Concepts
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[relations]
# skos:broader is used even for transitive relations, which makes it
# difficult to know the direct relationships. Luckily the skos:narrower
# hierarchy is not transitive so Skosify is able to reconstruct the
# hierarchy, as long as skos:broader relationships are first eliminated.
